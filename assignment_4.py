# -*- coding: utf-8 -*-
"""assignment 4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rnfcbKZBgjzmH6oFKRpwZmTjaHE8tik_
"""

import numpy as np

# Task 1: Ordinary Least Squares Linear Regression

# Given data
weights = np.array([2, 4, 5, 3, 6, 5, 7])
prices = np.array([35, 60, 20, 50, 50, 55, 60])

# Calculate the slope (M) and y-intercept (C)
n = len(weights)
sum_x = np.sum(weights)
sum_y = np.sum(prices)
sum_xy = np.sum(weights * prices)
sum_x_squared = np.sum(weights**2)

slope_M = (n * sum_xy - sum_x * sum_y) / (n * sum_x_squared - sum_x**2)
intercept_C = (sum_y - slope_M * sum_x) / n

# Predict the price when the weight is 6
predicted_price = slope_M * 6 + intercept_C

print("Task 1:")
print("Slope (M):", slope_M)
print("Y-intercept (C):", intercept_C)
print("Predicted price for weight 6:", predicted_price)

# Task 2: Compute the residuals

# Calculate residuals
predicted_prices = slope_M * weights + intercept_C
residuals = prices - predicted_prices

print("\nTask 2:")
residuals_table = np.column_stack((weights, prices, predicted_prices, residuals))
print("Weight | Actual Price | Predicted Price | Residual")
print(residuals_table)

# Task 3: Calculate Mean Squared Error (MSE) and Mean Absolute Error (MAE)

# Calculate Mean Squared Error (MSE)
mse = np.mean(residuals**2)

# Calculate Mean Absolute Error (MAE)
mae = np.mean(np.abs(residuals))

print("\nTask 3:")
print("Mean Squared Error (MSE):", mse)
print("Mean Absolute Error (MAE):", mae)